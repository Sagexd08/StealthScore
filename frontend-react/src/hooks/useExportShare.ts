import { useState } from 'react'
import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'
import toast from 'react-hot-toast'

interface Scores {
  clarity: number
  originality: number
  team_strength: number
  market_fit: number
}

interface ExportData {
  scores: Scores
  receipt: string
  timestamp: string
  averageScore: number
}

export const useExportShare = () => {
  const [isExporting, setIsExporting] = useState(false)

  const generatePDF = async (data: ExportData): Promise<void> => {
    setIsExporting(true)
    
    try {
      const pdf = new jsPDF()
      const pageWidth = pdf.internal.pageSize.getWidth()
      const pageHeight = pdf.internal.pageSize.getHeight()
      
      // Header
      pdf.setFontSize(24)
      pdf.setTextColor(59, 130, 246) // Blue color
      pdf.text('PitchGuard Analysis Report', pageWidth / 2, 30, { align: 'center' })
      
      // Subtitle
      pdf.setFontSize(12)
      pdf.setTextColor(100, 100, 100)
      pdf.text('Secure AI-Powered Pitch Analysis', pageWidth / 2, 40, { align: 'center' })
      
      // Date
      pdf.setFontSize(10)
      pdf.text(`Generated: ${data.timestamp}`, pageWidth / 2, 50, { align: 'center' })
      
      // Overall Score
      pdf.setFontSize(18)
      pdf.setTextColor(0, 0, 0)
      pdf.text(`Overall Score: ${data.averageScore.toFixed(1)}/10`, pageWidth / 2, 70, { align: 'center' })
      
      // Score breakdown
      let yPosition = 90
      pdf.setFontSize(14)
      pdf.text('Score Breakdown:', 20, yPosition)
      
      yPosition += 20
      pdf.setFontSize(12)
      
      const scoreItems = [
        { label: 'Narrative Clarity', score: data.scores.clarity },
        { label: 'Originality', score: data.scores.originality },
        { label: 'Team Strength', score: data.scores.team_strength },
        { label: 'Market Fit', score: data.scores.market_fit },
      ]
      
      scoreItems.forEach((item) => {
        pdf.text(`${item.label}:`, 30, yPosition)
        pdf.text(`${item.score.toFixed(1)}/10`, 120, yPosition)
        
        // Progress bar
        const barWidth = 60
        const barHeight = 4
        const scoreWidth = (item.score / 10) * barWidth
        
        // Background bar
        pdf.setFillColor(230, 230, 230)
        pdf.rect(140, yPosition - 3, barWidth, barHeight, 'F')
        
        // Score bar
        const color = item.score >= 8 ? [34, 197, 94] : item.score >= 6 ? [251, 191, 36] : [239, 68, 68]
        pdf.setFillColor(color[0], color[1], color[2])
        pdf.rect(140, yPosition - 3, scoreWidth, barHeight, 'F')
        
        yPosition += 15
      })
      
      // Receipt section
      yPosition += 20
      pdf.setFontSize(14)
      pdf.text('Cryptographic Receipt:', 20, yPosition)
      
      yPosition += 15
      pdf.setFontSize(8)
      pdf.setFont('courier')
      
      // Split receipt into multiple lines
      const receiptLines = data.receipt.match(/.{1,60}/g) || []
      receiptLines.forEach((line) => {
        pdf.text(line, 20, yPosition)
        yPosition += 8
      })
      
      // Security notice
      yPosition += 20
      pdf.setFont('helvetica')
      pdf.setFontSize(10)
      pdf.setTextColor(100, 100, 100)
      pdf.text('This receipt serves as cryptographic proof of your scoring session.', 20, yPosition)
      pdf.text('It cannot be forged and verifies the authenticity of these results.', 20, yPosition + 10)
      
      // Footer
      pdf.setFontSize(8)
      pdf.text('Generated by PitchGuard Lite - Secure Pitch Analysis', pageWidth / 2, pageHeight - 20, { align: 'center' })
      pdf.text('https://pitchguard.com', pageWidth / 2, pageHeight - 10, { align: 'center' })
      
      // Save the PDF
      pdf.save(`pitchguard-analysis-${Date.now()}.pdf`)
      toast.success('PDF report generated successfully!')
      
    } catch (error) {
      console.error('Error generating PDF:', error)
      toast.error('Failed to generate PDF report')
    } finally {
      setIsExporting(false)
    }
  }

  const shareResults = async (data: ExportData): Promise<void> => {
    try {
      if (navigator.share) {
        // Use native sharing if available
        await navigator.share({
          title: 'PitchGuard Analysis Results',
          text: `My pitch scored ${data.averageScore.toFixed(1)}/10 on PitchGuard! üöÄ\n\nBreakdown:\nüìù Clarity: ${data.scores.clarity}/10\nüí° Originality: ${data.scores.originality}/10\nüë• Team: ${data.scores.team_strength}/10\nüéØ Market Fit: ${data.scores.market_fit}/10`,
          url: 'https://pitchguard.com'
        })
        toast.success('Results shared successfully!')
      } else {
        // Fallback to clipboard
        const shareText = `My pitch scored ${data.averageScore.toFixed(1)}/10 on PitchGuard! üöÄ

Breakdown:
üìù Clarity: ${data.scores.clarity}/10
üí° Originality: ${data.scores.originality}/10
üë• Team: ${data.scores.team_strength}/10
üéØ Market Fit: ${data.scores.market_fit}/10

Try PitchGuard: https://pitchguard.com`

        await navigator.clipboard.writeText(shareText)
        toast.success('Results copied to clipboard!')
      }
    } catch (error) {
      console.error('Error sharing results:', error)
      toast.error('Failed to share results')
    }
  }

  const exportAsImage = async (elementId: string): Promise<void> => {
    setIsExporting(true)
    
    try {
      const element = document.getElementById(elementId)
      if (!element) {
        throw new Error('Element not found')
      }

      const canvas = await html2canvas(element, {
        backgroundColor: 'transparent',
        scale: 2,
        logging: false,
      })

      // Create download link
      const link = document.createElement('a')
      link.download = `pitchguard-results-${Date.now()}.png`
      link.href = canvas.toDataURL()
      link.click()

      toast.success('Image exported successfully!')
    } catch (error) {
      console.error('Error exporting image:', error)
      toast.error('Failed to export image')
    } finally {
      setIsExporting(false)
    }
  }

  const copyReceiptHash = async (receipt: string): Promise<void> => {
    try {
      await navigator.clipboard.writeText(receipt)
      toast.success('Receipt hash copied to clipboard!')
    } catch (error) {
      console.error('Error copying receipt:', error)
      toast.error('Failed to copy receipt')
    }
  }

  return {
    generatePDF,
    shareResults,
    exportAsImage,
    copyReceiptHash,
    isExporting
  }
}
